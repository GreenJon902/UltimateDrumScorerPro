#:import Clock kivy.clock.Clock
#:import GlobalBindings app.globalBindings.GlobalBindings

#:import constants constants


BoxLayout:
    orientation: "vertical"

    BoxLayout: # HeaderBar
        size_hint_y: constants.graphics.bar_size_hint
        height: constants.graphics.bar_size


        canvas.before:
            Color:
                rgb: constants.graphics.header_color

            Rectangle:
                pos: self.pos
                size: self.size

        Widget: # Spacer


        Image:
            source: "resources/zoom_minus_sign.png"
            size_hint_x: None
            on_height: self.width = self.height
            color: constants.graphics.score_zoom_sign_color

        Slider:
            size_hint_x: constants.graphics.score_zoom_bar_size_hint_x
            width: constants.graphics.score_zoom_bar_width

            min: constants.graphics.score_zoom_min
            max: constants.graphics.score_zoom_max
            step: constants.graphics.score_zoom_step

            value: constants.graphics.score_zoom_start
            on_value: score_view.zoom = args[1]

        Image:
            source: "resources/zoom_plus_sign.png"
            size_hint_x: None
            on_height: self.width = self.height
            color: constants.graphics.score_zoom_sign_color



    BoxLayout:
        orientation: "horizontal"




        BoxLayout: # SideBar
            orientation: "vertical"

            size_hint_x: constants.graphics.bar_size_hint
            width: constants.graphics.bar_size

            canvas.before:
                Color:
                    rgb: constants.graphics.side_bar_color

                Rectangle:
                    pos: self.pos
                    size: self.size

            NoDisableSquareHoverButtonW:
                name: "move"
                on_press: GlobalBindings.dispatch("sidebar_button_clicked", self)


            NoDisableSquareHoverButtonW:
                name: "text"
                on_press: GlobalBindings.dispatch("sidebar_button_clicked", self)


            NoDisableSquareHoverButtonW:
                name: "section"
                on_press: GlobalBindings.dispatch("sidebar_button_clicked", self)

            NoDisableSquareHoverButtonW:
                name: "note"
                on_press: GlobalBindings.dispatch("sidebar_button_clicked", self)


            Widget:




        BoxLayout: # BG
            canvas.before:
                Color:
                    rgb: constants.graphics.bg_color

                Rectangle:
                    pos: self.pos
                    size: self.size


            ScoreView:
                id: score_view

                zoom: constants.graphics.score_zoom_start





    FloatLayout:
        size_hint: None, None
        size: 0, 0

        CustomMouse:
            id: custom_mouse




<_HoverButton@BoxLayoutWithClickHoverEvent>:
    name: "unknown"

    on_press: image.source = constants.graphics.mode_button_path.format(name=root.name, state="click")
    on_name: image.source = (constants.graphics.mode_button_path.format(name=root.name, state="click") if self.state == "down" else (constants.graphics.mode_button_path.format(name=root.name, state="hover") if self.mouse_over else (constants.graphics.mode_button_path.format(name=root.name, state="normal"))))

    Image:
        id: image


<NoDisableHoverButton@_HoverButton>:
    on_mouse_enter: root.ids.image.source = constants.graphics.mode_button_path.format(name=root.name, state="hover") if root.ids.image.source == constants.graphics.mode_button_path.format(name=root.name, state="normal") else root.ids.image.source
    on_mouse_leave: root.ids.image.source = constants.graphics.mode_button_path.format(name=root.name, state="normal") if root.ids.image.source == constants.graphics.mode_button_path.format(name=root.name, state="hover") else root.ids.image.source


<HoverButton@_HoverButton>:
    on_mouse_enter: root.ids.image.source = constants.graphics.mode_button_path.format(name=root.name, state="hover")
    on_mouse_leave: root.ids.image.source = constants.graphics.mode_button_path.format(name=root.name, state="normal")
    on_release: root.ids.image.source = constants.graphics.mode_button_path.format(name=root.name, state="hover")




<NoDisableSquareHoverButtonW@NoDisableHoverButton>:
    size_hint_y: None
    on_width: self.height = self.width

<NoDisableSquareHoverButtonH@NoDisableHoverButton>:
    size_hint_x: None
    on_width: self.width = self.height



<SquareHoverButtonW@HoverButton>:
    size_hint_y: None
    on_width: self.height = self.width

<SquareHoverButtonH@HoverButton>:
    size_hint_x: None
    on_width: self.width = self.height




# Score Content

<Page>:
    canvas.before:
        PushMatrix
        Scale:
            xyz: self.scale_xyz

    canvas.after:
        PopMatrix


<PageBg>:
    canvas:
        Color:
            rgb: 255, 255, 255
        Rectangle:
            pos: 0, 0
            size: self.size


<Text>:
    Image:
        id: image


<Section>:
    height: constants.graphics.section_height
    size_hint: None, None

    BoxLayout:
        size_hint: 1, 1
        orientation: "vertical"

        canvas:
            Color:
                rgba: 1, 0, 0, 0.1

            Rectangle:
                pos: 0, 0
                size: self.size

        SectionTitle:
            id: title_text

            canvas:
                Color:
                    rgba: 0, 0, 1, 0.5

                Rectangle:
                    pos: self.pos
                    size: self.size

        Widget:
            id: spacer
            size_hint_y: None
            height: constants.graphics.section_spacer_height

            canvas:
                Color:
                    rgba: 1, 0, 0, 0.5

                Rectangle:
                    pos: self.pos
                    size: self.size

        RelativeLayout:
            id: content
            size_hint_y: None
            height: constants.graphics.staff_height + (constants.graphics.staff_y_padding * 2)

            canvas:
                Color:
                    rgba: 0, 1, 0, 0.5

                Rectangle:
                    pos: 0, 0
                    size: self.size



<SectionTitle@Label>:
    font_size: constants.graphics.section_title_font_size
    color: 0, 0, 0
    bold: True

    size_hint: None, None
    height: constants.graphics.section_title_height
    width: self.texture_size[0]

    padding_x: constants.graphics.section_title_padding_x

    canvas:
        Color:
            rgb: constants.graphics.section_title_outline_color

        Line:
            rounded_rectangle: (self.x, self.y, self.width, self.height, 50)
            width: constants.graphics.section_title_outline_width


<Bar>:
    height: constants.graphics.staff_height + (constants.graphics.staff_y_padding * 2)
    size_hint_x: None

    bar_start_line_type: constants.graphics.default_bar_start_line_type
    bar_end_line_type: constants.graphics.default_bar_start_line_type

    canvas.before:
        PushMatrix
        Translate:
            y: constants.graphics.staff_y_padding

    canvas:
        Color:
            rgb: constants.graphics.staff_color

        Line:
            points: 0, constants.graphics.staff_gap * 0, self.width, constants.graphics.staff_gap * 0
            width: constants.graphics.staff_line_width

        Line:
            points: 0, constants.graphics.staff_gap * 1, self.width, constants.graphics.staff_gap * 1
            width: constants.graphics.staff_line_width

        Line:
            points: 0, constants.graphics.staff_gap * 2, self.width, constants.graphics.staff_gap * 2
            width: constants.graphics.staff_line_width

        Line:
            points: 0, constants.graphics.staff_gap * 3, self.width, constants.graphics.staff_gap * 3
            width: constants.graphics.staff_line_width

        Line:
            points: 0, constants.graphics.staff_gap * 4, self.width, constants.graphics.staff_gap * 4
            width: constants.graphics.staff_line_width


        Line:
            points: 0, 0, 0, constants.graphics.staff_height
            width: self._bar_start_line_width
            cap: "none"

        Line:
            points: self.width, 0, self.width, constants.graphics.staff_height
            width: self._bar_end_line_width
            cap: "none"

    canvas.after:
        PopMatrix


# Popups

<AddTextPopup>:
    title: "Text"
    size_hint: 0.5, 0.5

    BoxLayout:
        orientation: "vertical"

        BoxLayout:
            orientation: "horizontal"

            Label:
                text: "Text "
                size_hint_x: None
                on_texture_size: self.width = self.texture.size[0]

            TextInput:
                id: text
                hint_text: "Enter your text"



        BoxLayout:
            orientation: "horizontal"

            size_hint_y: None
            height: font_size.height

            Label:
                text: "Font Size (mm) "
                size_hint: None, None
                on_texture_size: self.width = self.texture.size[0]
                height: font_size.height

            SliderWithText:
                id: font_size

                min: constants.graphics.add_text_popup_font_size_min_mm
                max: constants.graphics.add_text_popup_font_size_max_mm
                value: constants.graphics.add_text_popup_font_size_default_mm

                hint_text: "Font Size"



        Button:
            text: "Finish"
            on_release: root.on_finish_button(self, "down")




<AddSectionPopup>:
    title: "Section"
    size_hint: 0.5, 0.5

    BoxLayout:
        orientation: "vertical"


        BoxLayout:
            orientation: "horizontal"

            Label:
                text: "Section Name "
                size_hint_x: None
                on_texture_size: self.width = self.texture.size[0]

            TextInput:
                id: title
                hint_text: "Enter this section's name"



        Button:
            text: "Finish"
            on_release: root.on_finish_button(self, "down")


# Misc

<SliderWithText>:
    size_hint_y: None
    height: constants.graphics.one_line_text_box_height

    TextInput:
        id: text_input
        multiline: False
        hint_text: root.hint_text

        on_text_validate: root.validate_text()
        on_focus: root.validate_text()

    Slider:
        id: slider
        orientation: root.orientation

        min: root.min
        max: root.max

        on_value: root.value = self.value
